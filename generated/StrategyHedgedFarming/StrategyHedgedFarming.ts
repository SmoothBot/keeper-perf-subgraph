// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollatRebalance extends ethereum.Event {
  get params(): CollatRebalance__Params {
    return new CollatRebalance__Params(this);
  }
}

export class CollatRebalance__Params {
  _event: CollatRebalance;

  constructor(event: CollatRebalance) {
    this._event = event;
  }

  get collatRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get adjAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DebtRebalance extends ethereum.Event {
  get params(): DebtRebalance__Params {
    return new DebtRebalance__Params(this);
  }
}

export class DebtRebalance__Params {
  _event: DebtRebalance;

  constructor(event: DebtRebalance) {
    this._event = event;
  }

  get debtRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get swapAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get slippage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyExitEnabled extends ethereum.Event {
  get params(): EmergencyExitEnabled__Params {
    return new EmergencyExitEnabled__Params(this);
  }
}

export class EmergencyExitEnabled__Params {
  _event: EmergencyExitEnabled;

  constructor(event: EmergencyExitEnabled) {
    this._event = event;
  }
}

export class Harvested extends ethereum.Event {
  get params(): Harvested__Params {
    return new Harvested__Params(this);
  }
}

export class Harvested__Params {
  _event: Harvested;

  constructor(event: Harvested) {
    this._event = event;
  }

  get profit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtPayment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtOutstanding(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SetDoHealthCheck extends ethereum.Event {
  get params(): SetDoHealthCheck__Params {
    return new SetDoHealthCheck__Params(this);
  }
}

export class SetDoHealthCheck__Params {
  _event: SetDoHealthCheck;

  constructor(event: SetDoHealthCheck) {
    this._event = event;
  }

  get param0(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetHealthCheck extends ethereum.Event {
  get params(): SetHealthCheck__Params {
    return new SetHealthCheck__Params(this);
  }
}

export class SetHealthCheck__Params {
  _event: SetHealthCheck;

  constructor(event: SetHealthCheck) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedDebtThreshold extends ethereum.Event {
  get params(): UpdatedDebtThreshold__Params {
    return new UpdatedDebtThreshold__Params(this);
  }
}

export class UpdatedDebtThreshold__Params {
  _event: UpdatedDebtThreshold;

  constructor(event: UpdatedDebtThreshold) {
    this._event = event;
  }

  get debtThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedKeeper extends ethereum.Event {
  get params(): UpdatedKeeper__Params {
    return new UpdatedKeeper__Params(this);
  }
}

export class UpdatedKeeper__Params {
  _event: UpdatedKeeper;

  constructor(event: UpdatedKeeper) {
    this._event = event;
  }

  get newKeeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedMaxReportDelay extends ethereum.Event {
  get params(): UpdatedMaxReportDelay__Params {
    return new UpdatedMaxReportDelay__Params(this);
  }
}

export class UpdatedMaxReportDelay__Params {
  _event: UpdatedMaxReportDelay;

  constructor(event: UpdatedMaxReportDelay) {
    this._event = event;
  }

  get delay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedMetadataURI extends ethereum.Event {
  get params(): UpdatedMetadataURI__Params {
    return new UpdatedMetadataURI__Params(this);
  }
}

export class UpdatedMetadataURI__Params {
  _event: UpdatedMetadataURI;

  constructor(event: UpdatedMetadataURI) {
    this._event = event;
  }

  get metadataURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class UpdatedMinReportDelay extends ethereum.Event {
  get params(): UpdatedMinReportDelay__Params {
    return new UpdatedMinReportDelay__Params(this);
  }
}

export class UpdatedMinReportDelay__Params {
  _event: UpdatedMinReportDelay;

  constructor(event: UpdatedMinReportDelay) {
    this._event = event;
  }

  get delay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedProfitFactor extends ethereum.Event {
  get params(): UpdatedProfitFactor__Params {
    return new UpdatedProfitFactor__Params(this);
  }
}

export class UpdatedProfitFactor__Params {
  _event: UpdatedProfitFactor;

  constructor(event: UpdatedProfitFactor) {
    this._event = event;
  }

  get profitFactor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedRewards extends ethereum.Event {
  get params(): UpdatedRewards__Params {
    return new UpdatedRewards__Params(this);
  }
}

export class UpdatedRewards__Params {
  _event: UpdatedRewards;

  constructor(event: UpdatedRewards) {
    this._event = event;
  }

  get rewards(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedStrategist extends ethereum.Event {
  get params(): UpdatedStrategist__Params {
    return new UpdatedStrategist__Params(this);
  }
}

export class UpdatedStrategist__Params {
  _event: UpdatedStrategist;

  constructor(event: UpdatedStrategist) {
    this._event = event;
  }

  get newStrategist(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyHedgedFarming__getLpReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_wantInLp(): BigInt {
    return this.value0;
  }

  get_shortInLp(): BigInt {
    return this.value1;
  }
}

export class StrategyHedgedFarming extends ethereum.SmartContract {
  static bind(address: Address): StrategyHedgedFarming {
    return new StrategyHedgedFarming("StrategyHedgedFarming", address);
  }

  apiVersion(): string {
    let result = super.call("apiVersion", "apiVersion():(string)", []);

    return result[0].toString();
  }

  try_apiVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("apiVersion", "apiVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceDebt(): BigInt {
    let result = super.call("balanceDebt", "balanceDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceDebt", "balanceDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceDebtInShort(): BigInt {
    let result = super.call(
      "balanceDebtInShort",
      "balanceDebtInShort():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceDebtInShort(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceDebtInShort",
      "balanceDebtInShort():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceDebtOracle(): BigInt {
    let result = super.call(
      "balanceDebtOracle",
      "balanceDebtOracle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceDebtOracle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceDebtOracle",
      "balanceDebtOracle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceDeployed(): BigInt {
    let result = super.call(
      "balanceDeployed",
      "balanceDeployed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceDeployed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceDeployed",
      "balanceDeployed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceLend(): BigInt {
    let result = super.call("balanceLend", "balanceLend():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceLend(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceLend", "balanceLend():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceLp(): BigInt {
    let result = super.call("balanceLp", "balanceLp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceLp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceLp", "balanceLp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceLpInShort(): BigInt {
    let result = super.call(
      "balanceLpInShort",
      "balanceLpInShort():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceLpInShort(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceLpInShort",
      "balanceLpInShort():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfWant(): BigInt {
    let result = super.call("balanceOfWant", "balanceOfWant():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceOfWant(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfWant",
      "balanceOfWant():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balancePendingHarvest(): BigInt {
    let result = super.call(
      "balancePendingHarvest",
      "balancePendingHarvest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balancePendingHarvest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balancePendingHarvest",
      "balancePendingHarvest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceShort(): BigInt {
    let result = super.call("balanceShort", "balanceShort():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceShort(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceShort", "balanceShort():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceShortWantEq(): BigInt {
    let result = super.call(
      "balanceShortWantEq",
      "balanceShortWantEq():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceShortWantEq(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceShortWantEq",
      "balanceShortWantEq():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcCollateral(): BigInt {
    let result = super.call("calcCollateral", "calcCollateral():(uint256)", []);

    return result[0].toBigInt();
  }

  try_calcCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCollateral",
      "calcCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcDebtRatio(): BigInt {
    let result = super.call("calcDebtRatio", "calcDebtRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_calcDebtRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcDebtRatio",
      "calcDebtRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collatLimit(): BigInt {
    let result = super.call("collatLimit", "collatLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collatLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collatLimit", "collatLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collatLower(): BigInt {
    let result = super.call("collatLower", "collatLower():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collatLower(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collatLower", "collatLower():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collatTarget(): BigInt {
    let result = super.call("collatTarget", "collatTarget():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collatTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collatTarget", "collatTarget():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collatUpper(): BigInt {
    let result = super.call("collatUpper", "collatUpper():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collatUpper(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collatUpper", "collatUpper():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralCapReached(_amount: BigInt): boolean {
    let result = super.call(
      "collateralCapReached",
      "collateralCapReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBoolean();
  }

  try_collateralCapReached(_amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "collateralCapReached",
      "collateralCapReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  debtLower(): BigInt {
    let result = super.call("debtLower", "debtLower():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtLower(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtLower", "debtLower():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtThreshold(): BigInt {
    let result = super.call("debtThreshold", "debtThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtThreshold",
      "debtThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtUpper(): BigInt {
    let result = super.call("debtUpper", "debtUpper():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtUpper(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtUpper", "debtUpper():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegatedAssets(): BigInt {
    let result = super.call(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegatedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  doHealthCheck(): boolean {
    let result = super.call("doHealthCheck", "doHealthCheck():(bool)", []);

    return result[0].toBoolean();
  }

  try_doHealthCheck(): ethereum.CallResult<boolean> {
    let result = super.tryCall("doHealthCheck", "doHealthCheck():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  doPriceCheck(): boolean {
    let result = super.call("doPriceCheck", "doPriceCheck():(bool)", []);

    return result[0].toBoolean();
  }

  try_doPriceCheck(): ethereum.CallResult<boolean> {
    let result = super.tryCall("doPriceCheck", "doPriceCheck():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergencyExit(): boolean {
    let result = super.call("emergencyExit", "emergencyExit():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergencyExit(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergencyExit", "emergencyExit():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  estimatedTotalAssets(): BigInt {
    let result = super.call(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedTotalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethToWant(_amtInWei: BigInt): BigInt {
    let result = super.call("ethToWant", "ethToWant(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amtInWei)
    ]);

    return result[0].toBigInt();
  }

  try_ethToWant(_amtInWei: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ethToWant", "ethToWant(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amtInWei)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLpPrice(): BigInt {
    let result = super.call("getLpPrice", "getLpPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLpPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLpPrice", "getLpPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLpReserves(): StrategyHedgedFarming__getLpReservesResult {
    let result = super.call(
      "getLpReserves",
      "getLpReserves():(uint256,uint256)",
      []
    );

    return new StrategyHedgedFarming__getLpReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getLpReserves(): ethereum.CallResult<
    StrategyHedgedFarming__getLpReservesResult
  > {
    let result = super.tryCall(
      "getLpReserves",
      "getLpReserves():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyHedgedFarming__getLpReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getOraclePrice(): BigInt {
    let result = super.call("getOraclePrice", "getOraclePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOraclePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOraclePrice",
      "getOraclePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestTrigger(callCostInWei: BigInt): boolean {
    let result = super.call(
      "harvestTrigger",
      "harvestTrigger(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(callCostInWei)]
    );

    return result[0].toBoolean();
  }

  try_harvestTrigger(callCostInWei: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "harvestTrigger",
      "harvestTrigger(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(callCostInWei)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  healthCheck(): Address {
    let result = super.call("healthCheck", "healthCheck():(address)", []);

    return result[0].toAddress();
  }

  try_healthCheck(): ethereum.CallResult<Address> {
    let result = super.tryCall("healthCheck", "healthCheck():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  insurance(): Address {
    let result = super.call("insurance", "insurance():(address)", []);

    return result[0].toAddress();
  }

  try_insurance(): ethereum.CallResult<Address> {
    let result = super.tryCall("insurance", "insurance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxReportDelay(): BigInt {
    let result = super.call("maxReportDelay", "maxReportDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxReportDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxReportDelay",
      "maxReportDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadataURI(): string {
    let result = super.call("metadataURI", "metadataURI():(string)", []);

    return result[0].toString();
  }

  try_metadataURI(): ethereum.CallResult<string> {
    let result = super.tryCall("metadataURI", "metadataURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  minDeploy(): BigInt {
    let result = super.call("minDeploy", "minDeploy():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDeploy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDeploy", "minDeploy():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minReportDelay(): BigInt {
    let result = super.call("minReportDelay", "minReportDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minReportDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minReportDelay",
      "minReportDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceSourceDiffKeeper(): BigInt {
    let result = super.call(
      "priceSourceDiffKeeper",
      "priceSourceDiffKeeper():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceSourceDiffKeeper(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceSourceDiffKeeper",
      "priceSourceDiffKeeper():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceSourceDiffUser(): BigInt {
    let result = super.call(
      "priceSourceDiffUser",
      "priceSourceDiffUser():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceSourceDiffUser(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceSourceDiffUser",
      "priceSourceDiffUser():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  profitFactor(): BigInt {
    let result = super.call("profitFactor", "profitFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_profitFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("profitFactor", "profitFactor():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalancePercent(): BigInt {
    let result = super.call(
      "rebalancePercent",
      "rebalancePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalancePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalancePercent",
      "rebalancePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(): Address {
    let result = super.call("rewards", "rewards():(address)", []);

    return result[0].toAddress();
  }

  try_rewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewards", "rewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  short(): Address {
    let result = super.call("short", "short():(address)", []);

    return result[0].toAddress();
  }

  try_short(): ethereum.CallResult<Address> {
    let result = super.tryCall("short", "short():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slippageAdj(): BigInt {
    let result = super.call("slippageAdj", "slippageAdj():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slippageAdj(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slippageAdj", "slippageAdj():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategist(): Address {
    let result = super.call("strategist", "strategist():(address)", []);

    return result[0].toAddress();
  }

  try_strategist(): ethereum.CallResult<Address> {
    let result = super.tryCall("strategist", "strategist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tendTrigger(callCostInWei: BigInt): boolean {
    let result = super.call("tendTrigger", "tendTrigger(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(callCostInWei)
    ]);

    return result[0].toBoolean();
  }

  try_tendTrigger(callCostInWei: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("tendTrigger", "tendTrigger(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(callCostInWei)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  want(): Address {
    let result = super.call("want", "want():(address)", []);

    return result[0].toAddress();
  }

  try_want(): ethereum.CallResult<Address> {
    let result = super.tryCall("want", "want():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw(_amountNeeded: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountNeeded)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(_amountNeeded: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountNeeded)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class LiquidatePositionAuthCall extends ethereum.Call {
  get inputs(): LiquidatePositionAuthCall__Inputs {
    return new LiquidatePositionAuthCall__Inputs(this);
  }

  get outputs(): LiquidatePositionAuthCall__Outputs {
    return new LiquidatePositionAuthCall__Outputs(this);
  }
}

export class LiquidatePositionAuthCall__Inputs {
  _call: LiquidatePositionAuthCall;

  constructor(call: LiquidatePositionAuthCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionAuthCall__Outputs {
  _call: LiquidatePositionAuthCall;

  constructor(call: LiquidatePositionAuthCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get _newStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateInsuranceCall extends ethereum.Call {
  get inputs(): MigrateInsuranceCall__Inputs {
    return new MigrateInsuranceCall__Inputs(this);
  }

  get outputs(): MigrateInsuranceCall__Outputs {
    return new MigrateInsuranceCall__Outputs(this);
  }
}

export class MigrateInsuranceCall__Inputs {
  _call: MigrateInsuranceCall;

  constructor(call: MigrateInsuranceCall) {
    this._call = call;
  }

  get _newInsurance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MigrateInsuranceCall__Outputs {
  _call: MigrateInsuranceCall;

  constructor(call: MigrateInsuranceCall) {
    this._call = call;
  }
}

export class PauseStratCall extends ethereum.Call {
  get inputs(): PauseStratCall__Inputs {
    return new PauseStratCall__Inputs(this);
  }

  get outputs(): PauseStratCall__Outputs {
    return new PauseStratCall__Outputs(this);
  }
}

export class PauseStratCall__Inputs {
  _call: PauseStratCall;

  constructor(call: PauseStratCall) {
    this._call = call;
  }
}

export class PauseStratCall__Outputs {
  _call: PauseStratCall;

  constructor(call: PauseStratCall) {
    this._call = call;
  }
}

export class RebalanceCollateralCall extends ethereum.Call {
  get inputs(): RebalanceCollateralCall__Inputs {
    return new RebalanceCollateralCall__Inputs(this);
  }

  get outputs(): RebalanceCollateralCall__Outputs {
    return new RebalanceCollateralCall__Outputs(this);
  }
}

export class RebalanceCollateralCall__Inputs {
  _call: RebalanceCollateralCall;

  constructor(call: RebalanceCollateralCall) {
    this._call = call;
  }
}

export class RebalanceCollateralCall__Outputs {
  _call: RebalanceCollateralCall;

  constructor(call: RebalanceCollateralCall) {
    this._call = call;
  }
}

export class RebalanceDebtCall extends ethereum.Call {
  get inputs(): RebalanceDebtCall__Inputs {
    return new RebalanceDebtCall__Inputs(this);
  }

  get outputs(): RebalanceDebtCall__Outputs {
    return new RebalanceDebtCall__Outputs(this);
  }
}

export class RebalanceDebtCall__Inputs {
  _call: RebalanceDebtCall;

  constructor(call: RebalanceDebtCall) {
    this._call = call;
  }
}

export class RebalanceDebtCall__Outputs {
  _call: RebalanceDebtCall;

  constructor(call: RebalanceDebtCall) {
    this._call = call;
  }
}

export class SetCollateralThresholdsCall extends ethereum.Call {
  get inputs(): SetCollateralThresholdsCall__Inputs {
    return new SetCollateralThresholdsCall__Inputs(this);
  }

  get outputs(): SetCollateralThresholdsCall__Outputs {
    return new SetCollateralThresholdsCall__Outputs(this);
  }
}

export class SetCollateralThresholdsCall__Inputs {
  _call: SetCollateralThresholdsCall;

  constructor(call: SetCollateralThresholdsCall) {
    this._call = call;
  }

  get _lower(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _target(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _upper(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _limit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetCollateralThresholdsCall__Outputs {
  _call: SetCollateralThresholdsCall;

  constructor(call: SetCollateralThresholdsCall) {
    this._call = call;
  }
}

export class SetDebtThresholdCall extends ethereum.Call {
  get inputs(): SetDebtThresholdCall__Inputs {
    return new SetDebtThresholdCall__Inputs(this);
  }

  get outputs(): SetDebtThresholdCall__Outputs {
    return new SetDebtThresholdCall__Outputs(this);
  }
}

export class SetDebtThresholdCall__Inputs {
  _call: SetDebtThresholdCall;

  constructor(call: SetDebtThresholdCall) {
    this._call = call;
  }

  get _debtThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDebtThresholdCall__Outputs {
  _call: SetDebtThresholdCall;

  constructor(call: SetDebtThresholdCall) {
    this._call = call;
  }
}

export class SetDebtThresholdsCall extends ethereum.Call {
  get inputs(): SetDebtThresholdsCall__Inputs {
    return new SetDebtThresholdsCall__Inputs(this);
  }

  get outputs(): SetDebtThresholdsCall__Outputs {
    return new SetDebtThresholdsCall__Outputs(this);
  }
}

export class SetDebtThresholdsCall__Inputs {
  _call: SetDebtThresholdsCall;

  constructor(call: SetDebtThresholdsCall) {
    this._call = call;
  }

  get _lower(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _upper(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rebalancePercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDebtThresholdsCall__Outputs {
  _call: SetDebtThresholdsCall;

  constructor(call: SetDebtThresholdsCall) {
    this._call = call;
  }
}

export class SetDoHealthCheckCall extends ethereum.Call {
  get inputs(): SetDoHealthCheckCall__Inputs {
    return new SetDoHealthCheckCall__Inputs(this);
  }

  get outputs(): SetDoHealthCheckCall__Outputs {
    return new SetDoHealthCheckCall__Outputs(this);
  }
}

export class SetDoHealthCheckCall__Inputs {
  _call: SetDoHealthCheckCall;

  constructor(call: SetDoHealthCheckCall) {
    this._call = call;
  }

  get _doHealthCheck(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetDoHealthCheckCall__Outputs {
  _call: SetDoHealthCheckCall;

  constructor(call: SetDoHealthCheckCall) {
    this._call = call;
  }
}

export class SetEmergencyExitCall extends ethereum.Call {
  get inputs(): SetEmergencyExitCall__Inputs {
    return new SetEmergencyExitCall__Inputs(this);
  }

  get outputs(): SetEmergencyExitCall__Outputs {
    return new SetEmergencyExitCall__Outputs(this);
  }
}

export class SetEmergencyExitCall__Inputs {
  _call: SetEmergencyExitCall;

  constructor(call: SetEmergencyExitCall) {
    this._call = call;
  }
}

export class SetEmergencyExitCall__Outputs {
  _call: SetEmergencyExitCall;

  constructor(call: SetEmergencyExitCall) {
    this._call = call;
  }
}

export class SetHealthCheckCall extends ethereum.Call {
  get inputs(): SetHealthCheckCall__Inputs {
    return new SetHealthCheckCall__Inputs(this);
  }

  get outputs(): SetHealthCheckCall__Outputs {
    return new SetHealthCheckCall__Outputs(this);
  }
}

export class SetHealthCheckCall__Inputs {
  _call: SetHealthCheckCall;

  constructor(call: SetHealthCheckCall) {
    this._call = call;
  }

  get _healthCheck(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHealthCheckCall__Outputs {
  _call: SetHealthCheckCall;

  constructor(call: SetHealthCheckCall) {
    this._call = call;
  }
}

export class SetInsuranceCall extends ethereum.Call {
  get inputs(): SetInsuranceCall__Inputs {
    return new SetInsuranceCall__Inputs(this);
  }

  get outputs(): SetInsuranceCall__Outputs {
    return new SetInsuranceCall__Outputs(this);
  }
}

export class SetInsuranceCall__Inputs {
  _call: SetInsuranceCall;

  constructor(call: SetInsuranceCall) {
    this._call = call;
  }

  get _insurance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInsuranceCall__Outputs {
  _call: SetInsuranceCall;

  constructor(call: SetInsuranceCall) {
    this._call = call;
  }
}

export class SetKeeperCall extends ethereum.Call {
  get inputs(): SetKeeperCall__Inputs {
    return new SetKeeperCall__Inputs(this);
  }

  get outputs(): SetKeeperCall__Outputs {
    return new SetKeeperCall__Outputs(this);
  }
}

export class SetKeeperCall__Inputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }

  get _keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeeperCall__Outputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }
}

export class SetMaxReportDelayCall extends ethereum.Call {
  get inputs(): SetMaxReportDelayCall__Inputs {
    return new SetMaxReportDelayCall__Inputs(this);
  }

  get outputs(): SetMaxReportDelayCall__Outputs {
    return new SetMaxReportDelayCall__Outputs(this);
  }
}

export class SetMaxReportDelayCall__Inputs {
  _call: SetMaxReportDelayCall;

  constructor(call: SetMaxReportDelayCall) {
    this._call = call;
  }

  get _delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxReportDelayCall__Outputs {
  _call: SetMaxReportDelayCall;

  constructor(call: SetMaxReportDelayCall) {
    this._call = call;
  }
}

export class SetMetadataURICall extends ethereum.Call {
  get inputs(): SetMetadataURICall__Inputs {
    return new SetMetadataURICall__Inputs(this);
  }

  get outputs(): SetMetadataURICall__Outputs {
    return new SetMetadataURICall__Outputs(this);
  }
}

export class SetMetadataURICall__Inputs {
  _call: SetMetadataURICall;

  constructor(call: SetMetadataURICall) {
    this._call = call;
  }

  get _metadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetMetadataURICall__Outputs {
  _call: SetMetadataURICall;

  constructor(call: SetMetadataURICall) {
    this._call = call;
  }
}

export class SetMinReportDelayCall extends ethereum.Call {
  get inputs(): SetMinReportDelayCall__Inputs {
    return new SetMinReportDelayCall__Inputs(this);
  }

  get outputs(): SetMinReportDelayCall__Outputs {
    return new SetMinReportDelayCall__Outputs(this);
  }
}

export class SetMinReportDelayCall__Inputs {
  _call: SetMinReportDelayCall;

  constructor(call: SetMinReportDelayCall) {
    this._call = call;
  }

  get _delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinReportDelayCall__Outputs {
  _call: SetMinReportDelayCall;

  constructor(call: SetMinReportDelayCall) {
    this._call = call;
  }
}

export class SetProfitFactorCall extends ethereum.Call {
  get inputs(): SetProfitFactorCall__Inputs {
    return new SetProfitFactorCall__Inputs(this);
  }

  get outputs(): SetProfitFactorCall__Outputs {
    return new SetProfitFactorCall__Outputs(this);
  }
}

export class SetProfitFactorCall__Inputs {
  _call: SetProfitFactorCall;

  constructor(call: SetProfitFactorCall) {
    this._call = call;
  }

  get _profitFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProfitFactorCall__Outputs {
  _call: SetProfitFactorCall;

  constructor(call: SetProfitFactorCall) {
    this._call = call;
  }
}

export class SetRewardsCall extends ethereum.Call {
  get inputs(): SetRewardsCall__Inputs {
    return new SetRewardsCall__Inputs(this);
  }

  get outputs(): SetRewardsCall__Outputs {
    return new SetRewardsCall__Outputs(this);
  }
}

export class SetRewardsCall__Inputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }

  get _rewards(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsCall__Outputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }
}

export class SetSlippageConfigCall extends ethereum.Call {
  get inputs(): SetSlippageConfigCall__Inputs {
    return new SetSlippageConfigCall__Inputs(this);
  }

  get outputs(): SetSlippageConfigCall__Outputs {
    return new SetSlippageConfigCall__Outputs(this);
  }
}

export class SetSlippageConfigCall__Inputs {
  _call: SetSlippageConfigCall;

  constructor(call: SetSlippageConfigCall) {
    this._call = call;
  }

  get _slippageAdj(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _priceSourceDiffUser(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceSourceDiffKeeper(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _doPriceCheck(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetSlippageConfigCall__Outputs {
  _call: SetSlippageConfigCall;

  constructor(call: SetSlippageConfigCall) {
    this._call = call;
  }
}

export class SetStrategistCall extends ethereum.Call {
  get inputs(): SetStrategistCall__Inputs {
    return new SetStrategistCall__Inputs(this);
  }

  get outputs(): SetStrategistCall__Outputs {
    return new SetStrategistCall__Outputs(this);
  }
}

export class SetStrategistCall__Inputs {
  _call: SetStrategistCall;

  constructor(call: SetStrategistCall) {
    this._call = call;
  }

  get _strategist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategistCall__Outputs {
  _call: SetStrategistCall;

  constructor(call: SetStrategistCall) {
    this._call = call;
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }
}

export class TendCall extends ethereum.Call {
  get inputs(): TendCall__Inputs {
    return new TendCall__Inputs(this);
  }

  get outputs(): TendCall__Outputs {
    return new TendCall__Outputs(this);
  }
}

export class TendCall__Inputs {
  _call: TendCall;

  constructor(call: TendCall) {
    this._call = call;
  }
}

export class TendCall__Outputs {
  _call: TendCall;

  constructor(call: TendCall) {
    this._call = call;
  }
}

export class UnpauseStratCall extends ethereum.Call {
  get inputs(): UnpauseStratCall__Inputs {
    return new UnpauseStratCall__Inputs(this);
  }

  get outputs(): UnpauseStratCall__Outputs {
    return new UnpauseStratCall__Outputs(this);
  }
}

export class UnpauseStratCall__Inputs {
  _call: UnpauseStratCall;

  constructor(call: UnpauseStratCall) {
    this._call = call;
  }
}

export class UnpauseStratCall__Outputs {
  _call: UnpauseStratCall;

  constructor(call: UnpauseStratCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amountNeeded(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _loss(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
